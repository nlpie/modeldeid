import java.io.*;
import java.util.*;
import java.util.logging.Logger;

/**
 * Class for filtering private information from a word2vec model.
 *
 * Created by gpfinley on 9/26/16.
 */
public class ModelScrubber {

    private static Logger LOGGER = Logger.getLogger(ModelScrubber.class.getName());

    private final AllowedWords allowedWords;

    public ModelScrubber(AllowedWords allowedWords) {
        this.allowedWords = allowedWords;
    }

    /**
     * Scrub out forbidden words and embeddings from a word2vec-style vectors file.
     * Two passes: first to get and count allowed words, and second write them
     * (a little slow but prevents having to keep it all in temp file or memory).
     * @param inPath
     * @param outPath
     * @throws IOException
     */
    public void scrubWord2vec(String inPath, String outPath) throws IOException {
        LOGGER.info("Getting allowed words from model...");
        InputStream reader = new FileInputStream(inPath);
        Set<Integer> wordsToKeep = new HashSet<>();
        char c;
        String nWordsStr = "";
        while(true) {
            c = (char)reader.read();
            if(c==' ') break;
            nWordsStr += c;
        }
        String sizeStr = "";
        while(true) {
            c = (char)reader.read();
            if(c=='\n') break;
            sizeStr += c;
        }
        int nWords = Integer.parseInt(nWordsStr);
        int size = Integer.parseInt(sizeStr);
        char firstchar = '\n';
        for(int i=0; i<nWords; i++) {
            String word = "";
            if(firstchar != '\n')
                word += firstchar;
            while((c = (char)reader.read()) != ' ') {
                word += c;
            }
            if (allowedWords.isAllowed(word)) {
                wordsToKeep.add(i);
            }
            reader.skip(size*4);
            // For some files, there's an extra \n (such as those generated by the C word2vec)
            // For others, there's no newline--it goes straight to the next word (the GoogleNews vectors, e.g.)
            firstchar = (char) reader.read();
        }

        LOGGER.info(wordsToKeep.size() + " words kept out of " + nWords + ". Writing model...");
        reader = new FileInputStream(inPath);
        OutputStream writer = new FileOutputStream(outPath);
        writer.write((wordsToKeep.size() + " " + sizeStr + "\n").getBytes());

        while ((char) reader.read() != '\n') {}
        firstchar = '\n';
        byte[] bytes = new byte[size*4];
        byte[] backslashN = "\n".getBytes();
        for(int i=0; i<nWords; i++) {
            if (wordsToKeep.contains(i)) {
                String word = "";
                if(firstchar != '\n')
                    word += firstchar;
                while((c = (char)reader.read()) != ' ') {
                    word += c;
                }
                reader.read(bytes, 0, size*4);
                writer.write((word + " ").getBytes());
                writer.write(bytes);
                writer.write(backslashN);
            } else {
                while ((char) reader.read() != ' ') {}
                reader.skip(size*4);
            }
            firstchar = (char) reader.read();
        }

        writer.flush();
        writer.close();
    }

    /**
     * Scrub out forbidden words from a word2vec-style vocab file
     * @param inPath
     * @param outPath
     * @throws IOException
     */
    public void scrubWord2vecVocab(String inPath, String outPath) throws IOException {
        LOGGER.info("Scrubbing model vocab file...");
        BufferedReader reader = new BufferedReader(new FileReader(inPath));
        BufferedWriter writer = new BufferedWriter(new FileWriter(outPath));
        String line;
        while((line = reader.readLine()) != null) {
            String[] fields = line.split("\\s+");
            if (allowedWords.isAllowed(fields[0])) {
                writer.write(line);
                writer.write("\n");
            }
        }
        writer.flush();
        writer.close();
    }

    /**
     * Load an AllowedWords object from a text output and apply filtering to a word2vec model (and optionally vocab)
     * @param args
     *      1: location of an AllowedWords text dump
     *      - 2: input word2vec .bin file
     *      - 3: output word2vec .bin file
     *      - (4: input word2vec .txt vocab file)
     *      - (5: output word2vec .txt vocab file)
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        AllowedWords allowedWords = AllowedWords.load(args[0]);
        ModelScrubber scrubber = new ModelScrubber(allowedWords);
        scrubber.scrubWord2vec(args[1], args[2]);
        if (args.length > 3) {
            scrubber.scrubWord2vecVocab(args[3], args[4]);
        }
    }

}
